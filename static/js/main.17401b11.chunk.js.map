{"version":3,"sources":["Components/Title.jsx","Components/Form.jsx","Components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","className","style","color","marginTop","url","bgColor","fgColor","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","marginRight","Weather","country","city","temperature","feels","description","humidity","windSpeed","pressure","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","response","json","data","setState","sys","main","temp","feels_like","weather","wind","speed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.17401b11.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { SocialIcon } from 'react-social-icons';\r\n\r\nclass Title extends Component{\r\n    render(){\r\n        return(\r\n            <div >\r\n\r\n<h7 className=\"title-container__title \" style={{color:\"white\"}}>KevJac</h7>\r\n\r\n<p className=\"title-container__subtitle\" style={{color:\"white\"}}>KevJac provides you with latest Temperature ,Humidity & real time rain, storm , snow reports and even wind speed!.</p>\r\n\r\n<p style={{color:\"white\",marginTop:\"80px\"}}>Developed by <h3>Kevin Jacob</h3> ,Connect me via</p>\r\n<SocialIcon url=\"http://github.com/kevinjacob2001\" bgColor=\"#9400D3\" fgColor=\"#ffffff\"/>\r\n<SocialIcon url=\"http://instagram.com/kevinjacob2001\" fgColor=\"#ffffff\" />\r\n<SocialIcon url=\"https://www.linkedin.com/in/kevinjacob2001/\" fgColor=\"#ffffff\" />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport { Component } from 'react';\r\n\r\n\r\nclass Form extends Component{\r\n    render(){\r\n        return(\r\n            <div >\r\n    <form onSubmit={this.props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n        <button style={{marginRight:\"30px\"}}>Get weather!</button>\r\n    </form> \r\n      \r\n</div>\r\n             )\r\n        }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n\r\nfunction Weather(props){\r\n        return(\r\n            <div>\r\n                {props.country&&props.city&&(<h6 className=\"weather__key\" >Location: \r\n                    \r\n                  <span>{\" \"}{props.city},{props.country}</span>\r\n                    \r\n                    </h6>)}\r\n                \r\n\r\n    \r\n\r\n      {props.temperature&&( <p className=\"weather__key\" >Current temperature:\r\n        <span>{\" \"} {props.temperature}{\"°C\"} but feels like {props.feels}{\"°C\"}</span>\r\n          </p>)}\r\n     \r\n          {props.description&&( <p className=\"weather__key\">Current weather:\r\n           \r\n           <span>{\" \"}{props.description}</span>\r\n                  \r\n                  </p>)}\r\n\r\n\r\n       {props.humidity&&( <p className=\"weather__key\">Humidity: \r\n        <span>{\" \"}{props.humidity}{\"%\"}</span>\r\n           </p>)}\r\n           {props.windSpeed&&( <p className=\"weather__key\">Wind Speed: \r\n        <span>{\" \"}{props.windSpeed}{\"km/hr\"}</span>\r\n           </p>)}\r\n           {props.pressure&&( <p className=\"weather__key\">Pressure: \r\n        <span>{\" \"}{props.pressure}{\"millibar\"}</span>\r\n           </p>)}\r\n       \r\n       \r\n        {props.error&&(<h2 className=\"weather__error\">{props.error}</h2>)}\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Weather;","import React, { Component } from 'react';\n\nimport './App.css';\n\n\n\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Title from './Components/Title';\nimport Form from './Components/Form';\nimport Weather from './Components/Weather';\n\n\n\n\nconst API_KEY=\"ba83f1e9b9127f1c19738fc56ba4aa3e\";\n\n\nclass App extends Component {\n\nstate={\n  country:undefined,\n  city:undefined,\n  temperature:undefined,\n  humidity:undefined,\n  description:undefined,\n  error:undefined,\n  feels:undefined,\n  windSpeed:undefined,\n  pressure:undefined\n\n}\n\n\n  \n getWeather=async (e)=>{\ne.preventDefault();\nconst city=e.target.elements.city.value;\nconst country=e.target.elements.country.value;\nconst response=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`)\nconst data=await response.json();\n\nif(city&&country){\nthis.setState({city:data.name})\nthis.setState({country:data.sys.country})\nthis.setState({temperature:data.main.temp})\nthis.setState({feels:data.main.feels_like})\nthis.setState({humidity:data.main.humidity})\nthis.setState({description:data.weather[0].description})\nthis.setState({windSpeed:data.wind.speed})\nthis.setState({pressure:data.main.pressure})\nthis.setState({error:\"\"})\n}\nelse{\n  this.setState({city:undefined})\nthis.setState({country:undefined})\nthis.setState({temperature:undefined})\nthis.setState({feels:undefined})\nthis.setState({humidity:undefined})\nthis.setState({description:undefined})\nthis.setState({windSpeed:undefined})\nthis.setState({pressure:undefined})\nthis.setState({error:\"Please fill up the input fields!\"})\n}\n}\n\n\n\n  render(){\n\n  return (\n    <div>\n \n<div className=\"wrapper\">\n  <div className=\"main\">\n    <div className=\"container\">\n      <div className=\"row\">\n<div className=\"col-6 title-container\">\n<Title/>\n\n\n\n</div>\n\n\n<div className=\"col-6 form-container\">\n\n<Form getWeather={this.getWeather}/>\n<Weather \ncountry={this.state.country} \ncity={this.state.city} \ntemperature={this.state.temperature} \nfeels={this.state.feels}\nhumidity={this.state.humidity} \ndescription={this.state.description}\nwindSpeed={this.state.windSpeed}\nerror={this.state.error}\npressure={this.state.pressure}\n/>\n\n</div>\n      </div>\n    </div>\n  </div>\n</div>\n\n\n\n    </div>\n\n  );\n}\n}\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}